[{"E:\\GeeksMan-2k21-FrontEnd\\src\\index.js":"1","E:\\GeeksMan-2k21-FrontEnd\\src\\App.js":"2","E:\\GeeksMan-2k21-FrontEnd\\src\\serviceWorker.js":"3","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\auth.js":"4","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\questionpage.js":"5","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\MainLayout.js":"6","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\utility.js":"7","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\actionsTypes.js":"8","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\About.js":"9","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\NotFound.js":"10","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomePage.js":"11","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\loginpage.js":"12","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\Contests.js":"13","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\Ace.js":"14","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\userpanel.js":"15","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\questionpage\\Questiondrawer.js":"16","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Navbar.js":"17","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHeader.js":"18","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHomeProblem.js":"19","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomepageCarousel.js":"20","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHome.js":"21","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestsHome.js":"22","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblem.js":"23","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\index.js":"24","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceUserPreferences.js":"25","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblems.js":"26","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceOptions.js":"27","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\Participation.js":"28","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\Developers-card.js":"29","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\About-memberscard.js":"30","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\modals\\modal.js":"31","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\LoginSlide.js":"32","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\ContestSlide.js":"33","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\TopPerformersSlide.js":"34","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\auth.js":"35","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestCard.js":"36","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\questionpage.js":"37","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceThemes.js":"38","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceLanguages.js":"39","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\contests.js":"40","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\contest.js":"41","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\modals\\success.js":"42","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\coordinators.js":"43"},{"size":1245,"mtime":1611027892842,"results":"44","hashOfConfig":"45"},{"size":195,"mtime":1611028067067,"results":"46","hashOfConfig":"45"},{"size":5086,"mtime":1610814163221,"results":"47","hashOfConfig":"45"},{"size":1495,"mtime":1610643382075,"results":"48","hashOfConfig":"45"},{"size":4129,"mtime":1610892709834,"results":"49","hashOfConfig":"45"},{"size":1128,"mtime":1610853304781,"results":"50","hashOfConfig":"45"},{"size":133,"mtime":1610643382075,"results":"51","hashOfConfig":"45"},{"size":832,"mtime":1610870438982,"results":"52","hashOfConfig":"45"},{"size":3909,"mtime":1611081042701,"results":"53","hashOfConfig":"45"},{"size":13263,"mtime":1610814163189,"results":"54","hashOfConfig":"45"},{"size":548,"mtime":1610814163183,"results":"55","hashOfConfig":"45"},{"size":8158,"mtime":1611033530885,"results":"56","hashOfConfig":"45"},{"size":1502,"mtime":1610946638555,"results":"57","hashOfConfig":"45"},{"size":2669,"mtime":1610814163168,"results":"58","hashOfConfig":"45"},{"size":7563,"mtime":1611027827410,"results":"59","hashOfConfig":"45"},{"size":12587,"mtime":1610814163217,"results":"60","hashOfConfig":"45"},{"size":3384,"mtime":1611027910025,"results":"61","hashOfConfig":"45"},{"size":185,"mtime":1610814163177,"results":"62","hashOfConfig":"45"},{"size":998,"mtime":1610814163178,"results":"63","hashOfConfig":"45"},{"size":1608,"mtime":1610945473852,"results":"64","hashOfConfig":"45"},{"size":3235,"mtime":1611036001361,"results":"65","hashOfConfig":"45"},{"size":2926,"mtime":1610906546812,"results":"66","hashOfConfig":"45"},{"size":513,"mtime":1610853446688,"results":"67","hashOfConfig":"45"},{"size":195,"mtime":1610882708735,"results":"68","hashOfConfig":"45"},{"size":2091,"mtime":1610814163175,"results":"69","hashOfConfig":"45"},{"size":712,"mtime":1610814163178,"results":"70","hashOfConfig":"45"},{"size":3829,"mtime":1610814163174,"results":"71","hashOfConfig":"45"},{"size":635,"mtime":1610814163217,"results":"72","hashOfConfig":"45"},{"size":2060,"mtime":1611079976846,"results":"73","hashOfConfig":"45"},{"size":924,"mtime":1610814163219,"results":"74","hashOfConfig":"45"},{"size":1535,"mtime":1611034403852,"results":"75","hashOfConfig":"45"},{"size":1040,"mtime":1610854133177,"results":"76","hashOfConfig":"45"},{"size":659,"mtime":1610907702618,"results":"77","hashOfConfig":"45"},{"size":1300,"mtime":1610814163185,"results":"78","hashOfConfig":"45"},{"size":2783,"mtime":1610869660829,"results":"79","hashOfConfig":"45"},{"size":1729,"mtime":1611033759469,"results":"80","hashOfConfig":"45"},{"size":2350,"mtime":1610684347823,"results":"81","hashOfConfig":"45"},{"size":2590,"mtime":1610814163175,"results":"82","hashOfConfig":"45"},{"size":5086,"mtime":1610814163174,"results":"83","hashOfConfig":"45"},{"size":1904,"mtime":1610882969527,"results":"84","hashOfConfig":"45"},{"size":2963,"mtime":1611030529330,"results":"85","hashOfConfig":"45"},{"size":996,"mtime":1610961788479,"results":"86","hashOfConfig":"45"},{"size":2498,"mtime":1611081136629,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"m2axyq",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\GeeksMan-2k21-FrontEnd\\src\\index.js",[],["186","187"],"E:\\GeeksMan-2k21-FrontEnd\\src\\App.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\serviceWorker.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\auth.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\questionpage.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\MainLayout.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\utility.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\actionsTypes.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\About.js",["188","189","190"],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\NotFound.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomePage.js",["191","192"],"import React,{useState} from 'react';\r\nimport 'owl.carousel/dist/assets/owl.carousel.css';\r\nimport 'owl.carousel/dist/assets/owl.theme.default.css';\r\nimport Navbar from '../Navbar';\r\nimport HomepageCarousel from './HomepageCarousel';\r\nimport LoginModal from '../utils/modals/modal';\r\n// import Footer from './Footer';\r\n\r\nconst HomePage = () => {\r\n    \r\n    return (\r\n        <div className=\"homepage\">\r\n            <Navbar />\r\n            <HomepageCarousel />\r\n\r\n            {/* <Footer /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\loginpage.js",["193"],"import React, { Component } from \"react\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport Modal from \"../utils/modals/modal\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nclass LoginPage extends Component {\r\n  state = {\r\n    activeClass: \"container\",\r\n    email: \"\",\r\n    password: \"\",\r\n    newemail: \"\",\r\n    newpassword: \"\",\r\n    validatenewpassword: \"\",\r\n    name: null,\r\n    success: false,\r\n    alert: \"\",\r\n    modal: false,\r\n    modalmessage: \"\",\r\n    modalheader: \"\",\r\n  };\r\n\r\n  signInShow = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ activeClass: \"container\" });\r\n  };\r\n\r\n  signUpShow = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ activeClass: \"container right-panel-active\" });\r\n  };\r\n\r\n  setLogin = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.password === \"\") {\r\n      this.setState({\r\n        alert: \"Please Enter Password\",\r\n        success: true,\r\n      });\r\n    } else if (this.state.email === \"\") {\r\n      this.setState({\r\n        alert: \"Please Enter Email\",\r\n        success: true,\r\n      });\r\n    } else {\r\n      this.props.reduxLogin(this.state.email, this.state.password);\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ success: false });\r\n  };\r\n\r\n  handleForgetPassword = () => {\r\n    this.setState({\r\n      modal: true,\r\n      modalmessage:\r\n        \"We have sent an email to you, check your email inbox to reset your password. If you are unable to find the reset email please check your spam folder.\",\r\n      modalheader: \"Reset your password\",\r\n    });\r\n  };\r\n\r\n  setSignup = (e) => {\r\n    var mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n    var passwordformat = /^(?=(.*[a-zA-Z]){1,})(?=(.*[0-9]){2,}).{8,}$/;\r\n\r\n    if (this.state.name === null) {\r\n      this.setState({ alert: \"Enter Valid Name\", success: true });\r\n      console.log(\"enter name\");\r\n    } else if (!this.state.newemail.match(mailformat)) {\r\n      this.setState({ alert: \"Enter Valid Email\", success: true });\r\n    } else if (this.state.newpassword === \"\") {\r\n      this.setState({ alert: \"Enter Password\", success: true });\r\n    } else if (!this.state.newpassword.match(passwordformat)) {\r\n      this.setState({\r\n        alert: \"Password must be minimun 8 digits with atleast 2 numericals\",\r\n        success: true,\r\n      });\r\n    } else if (this.state.validatenewpassword === this.state.newpassword) {\r\n      this.setState({\r\n        modal: true,\r\n        modalmessage:\r\n          \"Please check your email inbox to confirm your email address. If you are unable to find the confirmation email please check your spam folder.\",\r\n        modalheader: \"Confirm your email address\",\r\n      });\r\n      this.props.reduxSignup(\r\n        this.state.name,\r\n        this.state.newemail,\r\n        this.state.newpassword\r\n      );\r\n    } else {\r\n      this.setState({ alert: \"Password doesnot match\", success: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let authRedirect = null;\r\n\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to=\"/contests\" />;\r\n    }\r\n    return (\r\n      <>\r\n        <div className={this.state.activeClass} id=\"container\">\r\n          <div class=\"form-container sign-up-container\">\r\n            <form action=\"#\" className=\"login-signup\">\r\n              <h1>Create Account</h1>\r\n\r\n              <span>Use your email for registration</span>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Name\"\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    name: e.target.value,\r\n                  })\r\n                }\r\n                value={this.state.name}\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    newemail: e.target.value,\r\n                  })\r\n                }\r\n                value={this.state.newemail}\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    newpassword: e.target.value,\r\n                  })\r\n                }\r\n                value={this.state.newpassword}\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Confirm Password\"\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    validatenewpassword: e.target.value,\r\n                  })\r\n                }\r\n                value={this.state.validatenewpassword}\r\n              />\r\n              <button\r\n                className=\"login-button\"\r\n                onClick={(e) => this.setSignup(e)}\r\n              >\r\n                Sign Up\r\n              </button>\r\n            </form>\r\n          </div>\r\n          <div class=\"form-container sign-in-container\">\r\n            <form className=\"login-signup\" onSubmit={(e) => this.setLogin(e)}>\r\n              <h1>Sign in</h1>\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    email: e.target.value,\r\n                  })\r\n                }\r\n                value={this.state.email}\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={(e) =>\r\n                  this.setState({\r\n                    password: e.target.value,\r\n                  })\r\n                }\r\n                value={this.state.password}\r\n              />\r\n              <a href=\"#\" onClick={(e) => this.handleForgetPassword(e)}>\r\n                Forgot your password?\r\n              </a>\r\n              <button className=\"login-button\">Sign In</button>\r\n            </form>\r\n          </div>\r\n          <div class=\"overlay-container\">\r\n            <div class=\"overlay\">\r\n              <div class=\"overlay-panel overlay-left\">\r\n                <h1>Welcome Back!</h1>\r\n                <p>\r\n                  To keep connected with us please login with your personal info\r\n                </p>\r\n                <button\r\n                  class=\"ghost login-button\"\r\n                  onClick={(e) => this.signInShow(e)}\r\n                >\r\n                  Sign In\r\n                </button>\r\n              </div>\r\n              <div class=\"overlay-panel overlay-right\">\r\n                <h1>Hello, Geek!</h1>\r\n                <p>Enter your personal details and start journey with us</p>\r\n                <button\r\n                  class=\"ghost login-button\"\r\n                  onClick={(e) => this.signUpShow(e)}\r\n                >\r\n                  Sign Up\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Snackbar\r\n            open={this.state.success}\r\n            autoHideDuration={6000}\r\n            onClose={this.handleClose}\r\n          >\r\n            <Alert onClose={this.handleClose} severity=\"error\">\r\n              {this.state.alert}\r\n            </Alert>\r\n          </Snackbar>\r\n          <Modal\r\n            show={this.state.modal}\r\n            message={this.state.modalmessage}\r\n            confirm=\"false\"\r\n            heading={this.state.modalheader}\r\n          />\r\n          {authRedirect}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    reduxLogin: (email, password) => {\r\n      dispatch(actions.reduxLogin(email, password));\r\n    },\r\n    reduxSignup: (name, newemail, newpassword) => {\r\n      dispatch(actions.reduxSignup(name, newemail, newpassword));\r\n    },\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    isAuthenticated: state.auth.token !== null,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\Contests.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\Ace.js",["194"],"import React, { useState } from \"react\";\r\nimport {FullScreen}  from \"react-full-screen\";\r\nimport AceEditor from \"react-ace\";\r\nimport AceOptions from './AceOptions';\r\nimport AceUserPreferences from './AceUserPreferences';\r\nimport 'brace/ext/language_tools'; // for autocompletion\r\n\r\nvar updateTimeoutHandle; // needs to be declared outside Ace function\r\n\r\nconst Ace = () => {\r\n    const [theme, setTheme] = useState(() => localStorage.getItem('editorTheme') ? localStorage.getItem('editorTheme') : 'monokai');\r\n    const [language, setLanguage] = useState(() => localStorage.getItem('editorLanguage') ? localStorage.getItem('editorLanguage') : 'cpp');\r\n    const [fontSize, setFontSize] = useState(() => localStorage.getItem('editorFontSize') ? parseInt(localStorage.getItem('editorFontSize')) : 14);\r\n    const [isFull, setIsFull] = useState(false);\r\n    const [editorHeight, setEditorHeight] = useState('500px');\r\n\r\n    const updateUserCode = (newValue) => {\r\n        // key: <contestId-problem-id-language>, value: code\r\n        localStorage.setItem('contest0-problem0-' + language, newValue);\r\n        console.log('code updated.');\r\n    }\r\n\r\n    const onChange = (newValue) => {\r\n        clearTimeout(updateTimeoutHandle);\r\n        updateTimeoutHandle = setTimeout(() => { updateUserCode(newValue) }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n                <div className=\"ace-container\">\r\n                    <AceUserPreferences theme={theme} setTheme={setTheme} language={language} setLanguage={setLanguage} fontSize={fontSize} setFontSize={setFontSize} isFull={isFull} setIsFull={setIsFull} editorHeight={editorHeight} setEditorHeight={setEditorHeight} />\r\n                    <AceEditor\r\n                        value={localStorage.getItem('contest0-problem0-' + language) ? localStorage.getItem('contest0-problem0-' + language) : ''}\r\n                        mode={((language === 'c' || language === 'cpp') ? 'c_cpp' : language)}\r\n                        theme={theme}\r\n                        fontSize={fontSize}\r\n                        height={editorHeight}\r\n                        width={'100%'}\r\n                        onChange={onChange}\r\n                        editorProps={{ $blockScrolling: Infinity }}\r\n                        {...AceOptions}\r\n                    />\r\n                </div>\r\n           \r\n            <div className=\"editor-buttons-container\">\r\n                <input className=\"editor-button compile-and-run\" type=\"button\" value=\"Compile and Run\" />\r\n                <input className=\"editor-button submit\" type=\"button\" value=\"Submit\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Ace;\r\n\r\n",["195","196"],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\userpanel.js",["197","198","199","200"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ProfileIcon from \"@material-ui/icons/AccountBox\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Participation from \"./Participation\";\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction UserPanel(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const [contests, setcontests] = React.useState([\r\n    {\r\n      contestname: \"Code Fury\",\r\n      rank: \"4/50\",\r\n      points: \"400/500\",\r\n    },\r\n    {\r\n      contestname: \"Code Kedan\",\r\n      rank: \"4/50\",\r\n      points: \"100/500\",\r\n    },\r\n    {\r\n      contestname: \"Audition round\",\r\n      rank: \"5/50\",\r\n      points: \"300/500\",\r\n    },\r\n  ]);\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const [selectedbtn, setselectedbtn] = React.useState(\"homebtn\");\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            setselectedbtn(\"homebtn\");\r\n          }}\r\n          selected={selectedbtn === \"homebtn\"}\r\n        >\r\n          <ListItemIcon>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Home\" />\r\n        </ListItem>\r\n        <Divider />\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            setselectedbtn(\"updateprofile\");\r\n          }}\r\n          selected={selectedbtn === \"updateprofile\"}\r\n        >\r\n          <ListItemIcon>\r\n            <ProfileIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"UpdateProfile\" />\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const container =\r\n    window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap className=\"headinginfo\">\r\n            <h5>Welcome,</h5>\r\n            Parag Thakur\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Typography>\r\n          {selectedbtn === \"homebtn\" && (\r\n            <div className=\"aboutuser\">\r\n              <div className=\"userinfo\">\r\n                <div className=\"userimagebox\">\r\n                  <Avatar className=\"styleimage\"></Avatar>\r\n                </div>\r\n                <div className=\"userinfobox\">\r\n                  <div className=\"nameinfo\">\r\n                    <h3>Parag Thakur</h3>\r\n                  </div>\r\n                  <div className=\"collegeinfo\">\r\n                    <span>\r\n                      Studying at YMCA University of Science and Technology -\r\n                      Faridabad\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"skillsinfo\">\r\n                    <h4>\r\n                      Skills: <span>C++,Python</span>\r\n                    </h4>\r\n                  </div>\r\n                  <div className=\"educationinfo\">\r\n                    <h4>\r\n                      Education:{\" \"}\r\n                      <span>\r\n                        YMCA University of Science and Technology - Faridabad\r\n                      </span>\r\n                    </h4>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"participationinfo\">\r\n                <div className=\"participationheading\">\r\n                  <h2 className=\"participationheadingstyle\">Participation:</h2>\r\n                </div>\r\n                <div className=\"contestinfocards\">\r\n                  {(contests.length ===0)\r\n                    &&(\r\n                      <h3>\r\n                        You haven't participated in any contest uptil now!!\r\n                      </h3>\r\n                    )}\r\n                  {contests.length != 0 &&\r\n                    contests.map((contest) => (\r\n                      <Participation\r\n                        contestname={contest.contestname}\r\n                        rank={contest.rank}\r\n                        marks={contest.points}\r\n                      />\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {selectedbtn === \"updateprofile\" && (\r\n            <div>\r\n              <div className=\"mainupdate\">\r\n                <h1>Update Profile</h1>\r\n              </div>\r\n              <div className=\"updateform\">\r\n                \r\n              </div>\r\n            </div>\r\n          )}\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserPanel;\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\questionpage\\Questiondrawer.js",["201","202","203","204","205","206"],"import React, { useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport QuestionIcon from \"@material-ui/icons/QuestionAnswerTwoTone\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const [selectedindex, setselected] = React.useState(0);\r\n  const [selectedOption, setSelectedOption] = React.useState({});\r\n  const [activequestion, setactivequestion] = React.useState(\r\n    props.questiondata[0]\r\n  );\r\n  const [tickicon, setTickicon] = React.useState(\r\n    <DoneIcon style={{ color: \"green\" }} />\r\n  );\r\n  const [value, setValue] = React.useState(activequestion.options.opt1.value);\r\n  const [savedindex, setSavedindex] = React.useState(null);\r\n  const [hour,setHour] = React.useState(-1);\r\n  const [minutes,setMinutes] = React.useState(-1);\r\n  const [seconds,setSeconds] = React.useState(-1);\r\n\r\n  //Mobile Screen\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  //get Questions\r\n  useEffect(() => {\r\n    \r\n    var countDownDate = new Date(\"Sep 25, 2025 11:37:00\").getTime();\r\n\r\n    // Update the count down every 1 second\r\n    var x = setInterval(function () {\r\n      // Get todays date and time\r\n      var now = new Date().getTime();\r\n\r\n      // Find the distance between now an the count down date\r\n      var distance = countDownDate - now;\r\n\r\n      // Time calculations for days, hours, minutes and seconds\r\n      var hours = Math.floor(\r\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      setHour(hours);\r\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      setMinutes(minutes);\r\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n      setSeconds(seconds);\r\n      // Output the result in an element with id=\"demo\"\r\n      \r\n      // If the count down is over, write some text\r\n      if(hours===0 && seconds===0 && minutes===0){\r\n        clearInterval(x);\r\n        handlePostQuestions();\r\n        console.log(\"done\");\r\n      }\r\n      \r\n    }, 1000);\r\n    \r\n  }, []);\r\n\r\n  //Submit Button\r\n  const handlePostQuestions = () => {\r\n    console.log(\"posted\")\r\n    props.postQuestions(props.token, localStorage.getItem([\"submissions\"]));\r\n  };\r\n\r\n  //Load Selection of Radio Buttons\r\n  const createSelection = (e, value) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const createArrayQuestions = (e) => {\r\n    e.preventDefault();\r\n\r\n    var myArray = [];\r\n    // load saved array\r\n    if (localStorage.getItem([\"submissions\"]) != null) {\r\n      myArray = JSON.parse(localStorage.getItem([\"submissions\"]));\r\n    }\r\n\r\n    var data = {\r\n      Question_Id: activequestion.id,\r\n      optionchosen: value,\r\n    };\r\n\r\n    console.log(myArray.length);\r\n\r\n    if (myArray.find((element) => element.Question_Id === activequestion.id)) {\r\n      for (var i = 0; i < myArray.length; i++) {\r\n        if (myArray[i].Question_Id === activequestion.id) {\r\n          myArray[i] = data;\r\n        }\r\n      }\r\n    } else {\r\n      myArray.push(data);\r\n    }\r\n\r\n    // re-save array\r\n    localStorage.setItem([\"submissions\"], JSON.stringify(myArray));\r\n  };\r\n\r\n  //Clear Selection\r\n  const removeArrayQuestions = (e) => {\r\n    e.preventDefault();\r\n    setValue(\"#\");\r\n    localStorage.removeItem([\"submissions\"]);\r\n  };\r\n\r\n  //Handle Previous Button\r\n  const handlePrev = (e) => {\r\n    e.preventDefault();\r\n    if (selectedindex !== 0) {\r\n      setselected(selectedindex - 1);\r\n      setactivequestion(props.questiondata[selectedindex - 1]);\r\n      console.log(selectedindex - 1);\r\n    } else {\r\n      setselected(selectedindex);\r\n      setactivequestion(props.questiondata[selectedindex]);\r\n    }\r\n  };\r\n\r\n  //Handle Next Button\r\n  const handleNext = (e) => {\r\n    e.preventDefault();\r\n    var len = Object.keys(props.questiondata).length - 1;\r\n    if (selectedindex !== len) {\r\n      setselected(selectedindex + 1);\r\n      setactivequestion(props.questiondata[selectedindex + 1]);\r\n      console.log(selectedindex + 1);\r\n    } else {\r\n      setselected(selectedindex);\r\n      setactivequestion(props.questiondata[selectedindex]);\r\n    }\r\n  };\r\n\r\n  //Handle Green Tick\r\n\r\n  const handleGreenTick = (index) => {\r\n    var myArray = [];\r\n    if (localStorage.getItem([\"submissions\"]) !== null) {\r\n      myArray = JSON.parse(localStorage.getItem([\"submissions\"]));\r\n    }\r\n\r\n    const help = myArray.findIndex((rank) => rank.Question_Id === index);\r\n    console.log(help);\r\n    if (help >= 0 && help <= 49) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  //Drawer Map\r\n  var drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {props.questiondata.map((questions, index) => (\r\n          <React.Fragment>\r\n            <ListItem\r\n              button\r\n              alignItems=\"center\"\r\n              index={index}\r\n              selected={selectedindex === index}\r\n              key={questions.id}\r\n              onClick={() => {\r\n                setactivequestion(questions);\r\n                setselected(index);\r\n              }}\r\n            >\r\n              <ListItemIcon>\r\n                {\" \"}\r\n                <QuestionIcon />{\" \"}\r\n              </ListItemIcon>\r\n              <ListItemText center primary={\"Question-\" + index} />\r\n              <ListItemIcon>\r\n                {localStorage.getItem([\"submissions\"])\r\n                  ? handleGreenTick(questions.id)\r\n                    ? tickicon\r\n                    : null\r\n                  : null}\r\n              </ListItemIcon>\r\n            </ListItem>\r\n            <Divider />\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  //Timer\r\n\r\n\r\n  const container =\r\n    window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            <div className=\"questionpageheader\">\r\n              <div className=\"timeinfo\">\r\n                <span>{hour}hr {minutes}min {seconds}sec</span>\r\n              </div>\r\n\r\n              <div className=\"prevnextbtn\">\r\n                <Button color=\"danger\" onClick={(e) => handlePrev(e)}>\r\n                  &larr; prev\r\n                </Button>\r\n                <Button color=\"danger\" onClick={(e) => handleNext(e)}>\r\n                  next &rarr;\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={(e) => handlePostQuestions(e)}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Typography paragraph>\r\n          <div className=\"mainquestion\">\r\n            <p>\r\n              <span>Question: </span>\r\n              {activequestion.question}\r\n            </p>\r\n          </div>\r\n          <div className=\"optionsselect\">\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup aria-label=\"Questions\" name=\"Question\" value={value}>\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt1.value}\r\n                  control={<Radio onClick={(e) => createSelection(e)} />}\r\n                  label={activequestion.options.opt1.option}\r\n                />\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt2.value}\r\n                  control={<Radio onClick={(e) => createSelection(e)} />}\r\n                  label={activequestion.options.opt2.option}\r\n                />\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt3.value}\r\n                  control={<Radio onClick={(e) => createSelection(e)} />}\r\n                  label={activequestion.options.opt3.option}\r\n                />\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt4.value}\r\n                  control={\r\n                    <Radio\r\n                      onClick={(e) => createSelection(e, e.target.value)}\r\n                    />\r\n                  }\r\n                  label={activequestion.options.opt4.option}\r\n                />\r\n              </RadioGroup>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={(e) => createArrayQuestions(e)}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={(e) => removeArrayQuestions(e)}\r\n              >\r\n                Clear\r\n              </Button>\r\n            </FormControl>\r\n          </div>\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getQuestions: (token) => {\r\n      dispatch(actions.getQuestions(token));\r\n    },\r\n    postQuestions: (token, data) => {\r\n      dispatch(actions.postQuestions(token, data));\r\n    },\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    questiondata: state.question.questionsdata,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResponsiveDrawer);\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Navbar.js",["207"],"import React,{useState} from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport Geeksman from \"./images/png/geeksman.png\";\r\nimport \"bootstrap/js/src/collapse.js\";\r\n\r\nconst Navbar = (props) => {\r\n  \r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-md\">\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-logo navbar-brand\" to=\"/\">\r\n          <img alt=\"svgImg\" width=\"48px\" src={Geeksman} />\r\n          GeeksCode\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav ml-auto\">\r\n            <li className=\"nav-item active\">\r\n              <NavLink className=\"nav-link\" to=\"/practice\">\r\n                Practice\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/contests\">\r\n                Contests\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link  \" to=\"/about\">\r\n                About\r\n              </NavLink>\r\n            </li>\r\n            {props.isAuthenticated && (\r\n              <div>\r\n                <IconButton\r\n                  aria-label=\"account of current user\"\r\n                  aria-controls=\"menu-appbar\"\r\n                  aria-haspopup=\"true\"\r\n                  onClick={handleMenu}\r\n                  color=\"inherit\"\r\n                >\r\n                  <AccountCircle />\r\n                </IconButton>\r\n                <Menu\r\n                  id=\"menu-appbar\"\r\n                  anchorEl={anchorEl}\r\n                  anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                  keepMounted\r\n                  transformOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                >\r\n                  <MenuItem onClick={handleClose}><Link to=\"/userpanel\">Profile</Link></MenuItem>\r\n                  <MenuItem onClick={handleClose}><Link to=\"/userpanel\">Settings</Link></MenuItem>\r\n                </Menu>\r\n              </div>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    isAuthenticated: true,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Navbar);\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHeader.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHomeProblem.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomepageCarousel.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHome.js",["208","209"],"import React, { Component } from \"react\";\r\nimport ContestHeader from \"./ContestHeader\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Modal from \"../utils/modals/modal\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass ContestHome extends Component {\r\n  state = {\r\n    open: false,\r\n    message: \"\",\r\n    redirect: false,\r\n    confirm:\"false\",\r\n    header:\"\"\r\n  };\r\n\r\n  CompareDate = (e, start, end) => {\r\n    e.preventDefault();\r\n    var startdate = Date.parse(start);\r\n    var enddate = Date.parse(end);\r\n    var nowdate = new Date();\r\n\r\n    if (startdate < nowdate || enddate > nowdate) {\r\n      this.setState({ open: true, message: \"The contest is not active. Either, it has not started or you have passed the contest date\", header:\"Message!\" });\r\n    }\r\n    else{\r\n        this.setState({\r\n            open:true,\r\n            header:\"Confirm Message!\",\r\n            message:\"Are you sure you want to start the contest. After clicking this you won't be able to backoff\",\r\n            confirm:true\r\n        })\r\n    }\r\n  };\r\n\r\n  onRedirect = (e) => {\r\n      e.preventDefault();\r\n      this.setState({redirect:true})\r\n  };\r\n\r\n  render() {\r\n    var id = JSON.parse(localStorage.getItem(\"activecontest\")) - 1;\r\n    let authRedirect = null;\r\n\r\n    if (this.state.redirect) {\r\n      authRedirect = (\r\n        <Redirect to={\"/contests/\" + this.props.data[id].name + \"/questions\"} />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id=\"contest-home\">\r\n        <ContestHeader content=\"Contests\" />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-7\">\r\n            <div className=\"contest-name\">{this.props.data[id].name}</div>\r\n            <div className=\"contest-remaining-time\">\r\n              The contest will start at {this.props.data[id].starttime} on{\" \"}\r\n              {this.props.data[id].startdate}\r\n            </div>\r\n            <div className=\"contest-instructions-container\">\r\n              <div className=\"contest-instructions-heading\">Instructions</div>\r\n              <div className=\"contest-instructions\">\r\n                {this.props.data[id].rules}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-5\">\r\n            <button\r\n              onClick={(e) =>\r\n                this.CompareDate(\r\n                  e,\r\n                  this.props.data[id].startdate,\r\n                  this.props.data[id].starttime,\r\n                  this.props.data[id].enddate,\r\n                  this.props.data[id].endtime\r\n                )\r\n              }\r\n              className=\"contest-register-button\"\r\n            >\r\n              Start Now\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          show={this.state.open}\r\n          message={this.state.message}\r\n          redirect={e=>this.onRedirect(e)}\r\n          confirm={this.state.confirm}\r\n          heading={this.state.header}\r\n        />\r\n        {authRedirect}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    data: state.contest.contestdata,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContestHome);\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestsHome.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblem.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\index.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceUserPreferences.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblems.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceOptions.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\Participation.js",["210"],"import React from 'react'\r\nimport Divider from \"@material-ui/core/Divider\";\r\nfunction Participation({contestname,rank,marks}) {\r\n    return (\r\n        <div className=\"participationcard\">\r\n            <div className=\"upperhalf\">\r\n              <h4>{contestname}</h4>\r\n            </div>\r\n            \r\n            <div className=\"lowerhalf\">\r\n              <div className=\"rankinfo\">\r\n                Rank:<span>{rank}</span>\r\n              </div>\r\n              <div className=\"marksinfo\">\r\n                Marks:<span>{marks}</span>\r\n              </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Participation\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\Developers-card.js",["211","212","213","214","215","216","217","218","219"],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\About-memberscard.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\modals\\modal.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\LoginSlide.js",["220"],"import React, { Component, useState } from \"react\";\r\nimport mainpng from \"../images/png/main.png\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass LoginSlide extends Component {\r\n  state = {\r\n    show: false,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"login-slide container-fluid\">\r\n          <img src={mainpng} className=\"mainpng\" alt=\"mainimg\"/>\r\n          <div className=\"login-slide-text-content\">\r\n            <h1>Geeksman - The Coding Society</h1>\r\n            <br />\r\n            Join the <strong>Coding Society</strong> of CE Department of JCBOSE UST{\" \"}\r\n            <br />\r\n            Practice coding, prepare for contests, and win challenges.\r\n          </div>\r\n          <div className=\"login-buttons\">\r\n            <Link className=\"login-button\" to=\"/login\">\r\n              Login\r\n            </Link>\r\n            <Link className=\"login-button\" to=\"/login\">\r\n              SignUp\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginSlide;\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\ContestSlide.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\TopPerformersSlide.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\auth.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestCard.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\questionpage.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceThemes.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceLanguages.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\contests.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\contest.js",["221"],"import * as actionTypes from \"../actions/actionsTypes\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n  contestdata: [\r\n    {\r\n      id: \"1\",\r\n      name: `<Hello World/>`,\r\n      starttime: \"09:00:00\",\r\n      endtime: \"21:00:00\",\r\n      startdate: \"2021-01-20\",\r\n      enddate: \"2021-01-22\",\r\n      prize: \"Selection in club\",\r\n      registeredusers: {\r\n        id: \"1\",\r\n        name: \"aayush\",\r\n        slot: \"1\",\r\n      },\r\n      contestdetails: \"This contest is for auditions of GeeksmanClub 2021\",\r\n      rules: \"1. Dont cheat 2.Dont Copy 3.Dont Hesitate 4.Dont Complete\",\r\n      upcoming: \"true\",\r\n      previous: \"false\",\r\n      ongoing: \"false\",\r\n    },\r\n    {\r\n      id: \"2\",\r\n      name: \"Auditions 2\",\r\n      starttime: \"09:00:00\",\r\n      endtime: \"21:00:00\",\r\n      startdate: \"2021-01-20\",\r\n      enddate: \"2021-01-22\",\r\n      prize: \"Selection in club\",\r\n      registeredusers: {\r\n        id: \"1\",\r\n        name: \"aayush\",\r\n        slot: \"1\",\r\n      },\r\n      contestdetails: \"This contest is for auditions of GeeksmanClub 2021\",\r\n      rules: \"1. Dont cheat 2.Dont Copy 3.Dont Hesitate 4.Dont Complete\",\r\n      upcoming: \"false\",\r\n      previous: \"false\",\r\n      ongoing: \"true\",\r\n    },\r\n    {\r\n      id: \"3\",\r\n      name: \"Auditions3\",\r\n      starttime: \"09:00:00\",\r\n      startdate: \"2021-01-20\",\r\n      enddate: \"2021-01-22\",\r\n      enddate: \"18/01/2021\",\r\n      prize: \"Selection in club\",\r\n      registeredusers: {\r\n        id: \"1\",\r\n        name: \"aayush\",\r\n        slot: \"1\",\r\n      },\r\n      contestdetails: \"This contest is for auditions of GeeksmanClub 2021\",\r\n      rules: \"1. Dont cheat \\n Dont Copy \\n Dont Hesitate \\n Dont Complete\",\r\n      upcoming: \"false\",\r\n      previous: \"true\",\r\n      ongoing: \"false\",\r\n    },\r\n  ],\r\n  loading: false,\r\n};\r\n\r\nconst getContestSuccess = (state, action) => {\r\n  return updateObject(state, {\r\n    contestdata: action.contestdata,\r\n    error: null,\r\n  });\r\n};\r\n\r\nconst getContestFail = (state, action) => {\r\n  return updateObject(state, {\r\n    error: action.error,\r\n    loading: false,\r\n  });\r\n};\r\n\r\nconst postContestSuccess = (state, action) => {\r\n  return updateObject(state, {\r\n    token: action.token,\r\n    name: action.name,\r\n    designation: action.designation,\r\n    error: null,\r\n    loading: false,\r\n  });\r\n};\r\n\r\nconst postContestFail = (state, action) => {\r\n  return updateObject(state, {\r\n    error: action.error,\r\n    loading: false,\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_CONTESTS_SUCCESS:\r\n      return getContestSuccess(state, action);\r\n    case actionTypes.GET_QUESTIONS_FAIL:\r\n      return getContestFail(state, action);\r\n    case actionTypes.POST_CONTESTS_SUCCESS:\r\n      return postContestSuccess(state, action);\r\n    case actionTypes.POST_QUESTIONS_FAIL:\r\n      return postContestFail(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\modals\\success.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\coordinators.js",["222","223"],{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":8,"column":10,"nodeType":"230","messageId":"231","endLine":8,"endColumn":23},{"ruleId":"228","severity":1,"message":"232","line":8,"column":25,"nodeType":"230","messageId":"231","endLine":8,"endColumn":40},{"ruleId":"233","severity":1,"message":"234","line":17,"column":11,"nodeType":"235","endLine":22,"endColumn":12},{"ruleId":"228","severity":1,"message":"236","line":1,"column":15,"nodeType":"230","messageId":"231","endLine":1,"endColumn":23},{"ruleId":"228","severity":1,"message":"237","line":6,"column":8,"nodeType":"230","messageId":"231","endLine":6,"endColumn":18},{"ruleId":"238","severity":1,"message":"239","line":187,"column":15,"nodeType":"235","endLine":187,"endColumn":73},{"ruleId":"228","severity":1,"message":"240","line":2,"column":9,"nodeType":"230","messageId":"231","endLine":2,"endColumn":19},{"ruleId":"224","replacedBy":"241"},{"ruleId":"226","replacedBy":"242"},{"ruleId":"228","severity":1,"message":"243","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":17},{"ruleId":"228","severity":1,"message":"244","line":9,"column":8,"nodeType":"230","messageId":"231","endLine":9,"endColumn":17},{"ruleId":"228","severity":1,"message":"245","line":62,"column":20,"nodeType":"230","messageId":"231","endLine":62,"endColumn":31},{"ruleId":"246","severity":1,"message":"247","line":216,"column":36,"nodeType":"248","messageId":"249","endLine":216,"endColumn":38},{"ruleId":"228","severity":1,"message":"250","line":67,"column":10,"nodeType":"230","messageId":"231","endLine":67,"endColumn":24},{"ruleId":"228","severity":1,"message":"251","line":67,"column":26,"nodeType":"230","messageId":"231","endLine":67,"endColumn":43},{"ruleId":"228","severity":1,"message":"252","line":71,"column":20,"nodeType":"230","messageId":"231","endLine":71,"endColumn":31},{"ruleId":"228","severity":1,"message":"253","line":75,"column":10,"nodeType":"230","messageId":"231","endLine":75,"endColumn":20},{"ruleId":"228","severity":1,"message":"254","line":75,"column":22,"nodeType":"230","messageId":"231","endLine":75,"endColumn":35},{"ruleId":"255","severity":1,"message":"256","line":118,"column":6,"nodeType":"257","endLine":118,"endColumn":8,"suggestions":"258"},{"ruleId":"228","severity":1,"message":"236","line":1,"column":15,"nodeType":"230","messageId":"231","endLine":1,"endColumn":23},{"ruleId":"228","severity":1,"message":"259","line":3,"column":10,"nodeType":"230","messageId":"231","endLine":3,"endColumn":14},{"ruleId":"228","severity":1,"message":"260","line":4,"column":13,"nodeType":"230","messageId":"231","endLine":4,"endColumn":20},{"ruleId":"228","severity":1,"message":"261","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":15},{"ruleId":"228","severity":1,"message":"262","line":2,"column":10,"nodeType":"230","messageId":"231","endLine":2,"endColumn":20},{"ruleId":"228","severity":1,"message":"263","line":3,"column":8,"nodeType":"230","messageId":"231","endLine":3,"endColumn":12},{"ruleId":"228","severity":1,"message":"264","line":4,"column":8,"nodeType":"230","messageId":"231","endLine":4,"endColumn":22},{"ruleId":"228","severity":1,"message":"265","line":5,"column":8,"nodeType":"230","messageId":"231","endLine":5,"endColumn":19},{"ruleId":"228","severity":1,"message":"266","line":6,"column":8,"nodeType":"230","messageId":"231","endLine":6,"endColumn":19},{"ruleId":"228","severity":1,"message":"267","line":7,"column":8,"nodeType":"230","messageId":"231","endLine":7,"endColumn":17},{"ruleId":"228","severity":1,"message":"268","line":8,"column":8,"nodeType":"230","messageId":"231","endLine":8,"endColumn":14},{"ruleId":"228","severity":1,"message":"269","line":9,"column":8,"nodeType":"230","messageId":"231","endLine":9,"endColumn":18},{"ruleId":"270","severity":1,"message":"271","line":23,"column":27,"nodeType":"235","endLine":23,"endColumn":65},{"ruleId":"228","severity":1,"message":"236","line":1,"column":28,"nodeType":"230","messageId":"231","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"273","line":50,"column":7,"nodeType":"274","messageId":"249","endLine":50,"endColumn":14},{"ruleId":"270","severity":1,"message":"271","line":16,"column":19,"nodeType":"235","endLine":16,"endColumn":62},{"ruleId":"270","severity":1,"message":"271","line":42,"column":19,"nodeType":"235","endLine":42,"endColumn":62},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"no-unused-vars","'activesection' is assigned a value but never used.","Identifier","unusedVar","'setactivsection' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'useState' is defined but never used.","'LoginModal' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'FullScreen' is defined but never used.",["275"],["276"],"'PropTypes' is defined but never used.","'InboxIcon' is defined but never used.","'setcontests' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'selectedOption' is assigned a value but never used.","'setSelectedOption' is assigned a value but never used.","'setTickicon' is assigned a value but never used.","'savedindex' is assigned a value but never used.","'setSavedindex' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handlePostQuestions'. Either include it or remove the dependency array.","ArrayExpression",["277"],"'Link' is defined but never used.","'actions' is defined but never used.","'Divider' is defined but never used.","'makeStyles' is defined but never used.","'Card' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-dupe-keys","Duplicate key 'enddate'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"278","fix":"279"},"Update the dependencies array to be: [handlePostQuestions]",{"range":"280","text":"281"},[3967,3969],"[handlePostQuestions]"]