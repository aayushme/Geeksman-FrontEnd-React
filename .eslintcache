[{"E:\\GeeksMan-2k21-FrontEnd\\src\\index.js":"1","E:\\GeeksMan-2k21-FrontEnd\\src\\App.js":"2","E:\\GeeksMan-2k21-FrontEnd\\src\\serviceWorker.js":"3","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\auth.js":"4","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\questionpage.js":"5","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\MainLayout.js":"6","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\utility.js":"7","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\actionsTypes.js":"8","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\About.js":"9","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\NotFound.js":"10","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomePage.js":"11","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\loginpage.js":"12","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\Contests.js":"13","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\Ace.js":"14","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\userpanel.js":"15","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\questionpage\\Questiondrawer.js":"16","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Navbar.js":"17","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHeader.js":"18","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHomeProblem.js":"19","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomepageCarousel.js":"20","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHome.js":"21","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestsHome.js":"22","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblem.js":"23","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\index.js":"24","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceUserPreferences.js":"25","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblems.js":"26","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceOptions.js":"27","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\Participation.js":"28","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\Developers-card.js":"29","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\About-memberscard.js":"30","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\modals\\modal.js":"31","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\LoginSlide.js":"32","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\ContestSlide.js":"33","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\TopPerformersSlide.js":"34","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\auth.js":"35","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestCard.js":"36","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\questionpage.js":"37","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceThemes.js":"38","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceLanguages.js":"39","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\contests.js":"40","E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\contest.js":"41"},{"size":1245,"mtime":1610882753792,"results":"42","hashOfConfig":"43"},{"size":231,"mtime":1610814163168,"results":"44","hashOfConfig":"43"},{"size":5086,"mtime":1610814163221,"results":"45","hashOfConfig":"43"},{"size":1495,"mtime":1610643382075,"results":"46","hashOfConfig":"43"},{"size":4129,"mtime":1610892709834,"results":"47","hashOfConfig":"43"},{"size":1128,"mtime":1610853304781,"results":"48","hashOfConfig":"43"},{"size":133,"mtime":1610643382075,"results":"49","hashOfConfig":"43"},{"size":832,"mtime":1610870438982,"results":"50","hashOfConfig":"43"},{"size":2574,"mtime":1610814163168,"results":"51","hashOfConfig":"43"},{"size":13263,"mtime":1610814163189,"results":"52","hashOfConfig":"43"},{"size":548,"mtime":1610814163183,"results":"53","hashOfConfig":"43"},{"size":3607,"mtime":1610814163186,"results":"54","hashOfConfig":"43"},{"size":1509,"mtime":1610894238504,"results":"55","hashOfConfig":"43"},{"size":2669,"mtime":1610814163168,"results":"56","hashOfConfig":"43"},{"size":8585,"mtime":1610814163218,"results":"57","hashOfConfig":"43"},{"size":12587,"mtime":1610814163217,"results":"58","hashOfConfig":"43"},{"size":1716,"mtime":1610853336187,"results":"59","hashOfConfig":"43"},{"size":185,"mtime":1610814163177,"results":"60","hashOfConfig":"43"},{"size":998,"mtime":1610814163178,"results":"61","hashOfConfig":"43"},{"size":1534,"mtime":1610907668467,"results":"62","hashOfConfig":"43"},{"size":1872,"mtime":1610906332221,"results":"63","hashOfConfig":"43"},{"size":2926,"mtime":1610906546812,"results":"64","hashOfConfig":"43"},{"size":513,"mtime":1610853446688,"results":"65","hashOfConfig":"43"},{"size":195,"mtime":1610882708735,"results":"66","hashOfConfig":"43"},{"size":2091,"mtime":1610814163175,"results":"67","hashOfConfig":"43"},{"size":712,"mtime":1610814163178,"results":"68","hashOfConfig":"43"},{"size":3829,"mtime":1610814163174,"results":"69","hashOfConfig":"43"},{"size":635,"mtime":1610814163217,"results":"70","hashOfConfig":"43"},{"size":826,"mtime":1610814163219,"results":"71","hashOfConfig":"43"},{"size":924,"mtime":1610814163219,"results":"72","hashOfConfig":"43"},{"size":1502,"mtime":1610908605283,"results":"73","hashOfConfig":"43"},{"size":1040,"mtime":1610854133177,"results":"74","hashOfConfig":"43"},{"size":659,"mtime":1610907702618,"results":"75","hashOfConfig":"43"},{"size":1300,"mtime":1610814163185,"results":"76","hashOfConfig":"43"},{"size":2783,"mtime":1610869660829,"results":"77","hashOfConfig":"43"},{"size":1537,"mtime":1610909098275,"results":"78","hashOfConfig":"43"},{"size":2350,"mtime":1610684347823,"results":"79","hashOfConfig":"43"},{"size":2590,"mtime":1610814163175,"results":"80","hashOfConfig":"43"},{"size":5086,"mtime":1610814163174,"results":"81","hashOfConfig":"43"},{"size":1904,"mtime":1610882969527,"results":"82","hashOfConfig":"43"},{"size":2961,"mtime":1610905586509,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"m2axyq",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"E:\\GeeksMan-2k21-FrontEnd\\src\\index.js",[],["177","178"],"E:\\GeeksMan-2k21-FrontEnd\\src\\App.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\serviceWorker.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\auth.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\questionpage.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\MainLayout.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\utility.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\actionsTypes.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\About.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\NotFound.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomePage.js",["179","180"],"import React,{useState} from 'react';\r\nimport 'owl.carousel/dist/assets/owl.carousel.css';\r\nimport 'owl.carousel/dist/assets/owl.theme.default.css';\r\nimport Navbar from '../Navbar';\r\nimport HomepageCarousel from './HomepageCarousel';\r\nimport LoginModal from '../utils/modals/modal';\r\n// import Footer from './Footer';\r\n\r\nconst HomePage = () => {\r\n    \r\n    return (\r\n        <div className=\"homepage\">\r\n            <Navbar />\r\n            <HomepageCarousel />\r\n\r\n            {/* <Footer /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\loginpage.js",["181"],"import React, { Component } from \"react\";\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\n\r\nclass LoginPage extends Component {\r\n\r\n  state={\r\n    activeClass : 'container',\r\n    email:'',\r\n    password:'',\r\n    newemail:'',\r\n    newpassword:'',\r\n    validatenewpassword:'',\r\n    name:''\r\n  }\r\n\r\n\r\n    signInShow = (e) =>{\r\n      e.preventDefault();\r\n      this.setState({activeClass:'container'});\r\n    }\r\n\r\n    signUpShow = (e) =>{\r\n      e.preventDefault();\r\n      this.setState({activeClass:'container right-panel-active'});\r\n    }\r\n\r\n    setLogin = (e) =>{\r\n      e.preventDefault();\r\n      console.log(process.env.PUBLIC_API_URL);\r\n      this.props.reduxLogin(this.state.email,this.state.password);\r\n    }\r\n\r\n    setSignup = (e) =>{\r\n\r\n      e.preventDefault();\r\n\r\n      if(this.state.validatenewpassword===this.state.newpassword){\r\n        this.props.reduxSignup(this.state.name,this.state.newemail,this.state.newpassword);\r\n      }\r\n      else{\r\n        console.log(\"Password Not Same\");\r\n      }\r\n      \r\n    }\r\n\r\n\r\n  render() {\r\n    \r\n    \r\n    return (\r\n      <>\r\n        \r\n        <div className={this.state.activeClass} id=\"container\">\r\n          <div class=\"form-container sign-up-container\">\r\n            <form action=\"#\" className=\"login-signup\">\r\n              <h1>Create Account</h1>\r\n             \r\n              <span>Use your email for registration</span>\r\n              <input type=\"text\" placeholder=\"Name\" />\r\n              <input type=\"email\" placeholder=\"Email\" />\r\n              <input type=\"password\" placeholder=\"Password\" />\r\n              <input type=\"password\" placeholder=\"Confirm Password\" />\r\n              <button className=\"login-button\" onSubmit={e => this.setSignup(e)}>Sign Up</button>\r\n            </form>\r\n          </div>\r\n          <div class=\"form-container sign-in-container\">\r\n            <form className=\"login-signup\" onSubmit={e => this.setLogin(e)}>\r\n              <h1>Sign in</h1>\r\n              <input type=\"email\" placeholder=\"Email\" />\r\n              <input type=\"password\" placeholder=\"Password\" />\r\n              <a href=\"#\">Forgot your password?</a>\r\n              <button className=\"login-button\" >Sign In</button>\r\n            </form>\r\n          </div>\r\n          <div class=\"overlay-container\">\r\n            <div class=\"overlay\">\r\n              <div class=\"overlay-panel overlay-left\">\r\n                <h1>Welcome Back!</h1>\r\n                <p>\r\n                  To keep connected with us please login with your personal info\r\n                </p>\r\n                <button class=\"ghost login-button\" onClick = {e=> this.signInShow(e)}>\r\n                  Sign In\r\n                </button>\r\n              </div>\r\n              <div class=\"overlay-panel overlay-right\">\r\n                <h1>Hello, Geek!</h1>\r\n                <p>Enter your personal details and start journey with us</p>\r\n                <button class=\"ghost login-button\" onClick={ e => this.signUpShow(e)} >\r\n                  Sign Up\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    reduxLogin: (email, password) => {\r\n      dispatch(actions.reduxLogin(email, password));\r\n    },\r\n    reduxSignup: (name, newemail,newpassword) => {\r\n      dispatch(actions.reduxSignup(name,newemail, newpassword));\r\n    },\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\Contests.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\Ace.js",["182"],"import React, { useState } from \"react\";\r\nimport {FullScreen}  from \"react-full-screen\";\r\nimport AceEditor from \"react-ace\";\r\nimport AceOptions from './AceOptions';\r\nimport AceUserPreferences from './AceUserPreferences';\r\nimport 'brace/ext/language_tools'; // for autocompletion\r\n\r\nvar updateTimeoutHandle; // needs to be declared outside Ace function\r\n\r\nconst Ace = () => {\r\n    const [theme, setTheme] = useState(() => localStorage.getItem('editorTheme') ? localStorage.getItem('editorTheme') : 'monokai');\r\n    const [language, setLanguage] = useState(() => localStorage.getItem('editorLanguage') ? localStorage.getItem('editorLanguage') : 'cpp');\r\n    const [fontSize, setFontSize] = useState(() => localStorage.getItem('editorFontSize') ? parseInt(localStorage.getItem('editorFontSize')) : 14);\r\n    const [isFull, setIsFull] = useState(false);\r\n    const [editorHeight, setEditorHeight] = useState('500px');\r\n\r\n    const updateUserCode = (newValue) => {\r\n        // key: <contestId-problem-id-language>, value: code\r\n        localStorage.setItem('contest0-problem0-' + language, newValue);\r\n        console.log('code updated.');\r\n    }\r\n\r\n    const onChange = (newValue) => {\r\n        clearTimeout(updateTimeoutHandle);\r\n        updateTimeoutHandle = setTimeout(() => { updateUserCode(newValue) }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n                <div className=\"ace-container\">\r\n                    <AceUserPreferences theme={theme} setTheme={setTheme} language={language} setLanguage={setLanguage} fontSize={fontSize} setFontSize={setFontSize} isFull={isFull} setIsFull={setIsFull} editorHeight={editorHeight} setEditorHeight={setEditorHeight} />\r\n                    <AceEditor\r\n                        value={localStorage.getItem('contest0-problem0-' + language) ? localStorage.getItem('contest0-problem0-' + language) : ''}\r\n                        mode={((language === 'c' || language === 'cpp') ? 'c_cpp' : language)}\r\n                        theme={theme}\r\n                        fontSize={fontSize}\r\n                        height={editorHeight}\r\n                        width={'100%'}\r\n                        onChange={onChange}\r\n                        editorProps={{ $blockScrolling: Infinity }}\r\n                        {...AceOptions}\r\n                    />\r\n                </div>\r\n           \r\n            <div className=\"editor-buttons-container\">\r\n                <input className=\"editor-button compile-and-run\" type=\"button\" value=\"Compile and Run\" />\r\n                <input className=\"editor-button submit\" type=\"button\" value=\"Submit\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Ace;\r\n\r\n",["183","184"],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\userpanel.js",["185","186","187","188"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ProfileIcon from \"@material-ui/icons/AccountBox\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Participation from \"./Participation\";\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction UserPanel(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const [contests, setcontests] = React.useState([\r\n    {\r\n      contestname: \"Code Fury\",\r\n      rank: \"4/50\",\r\n      points: \"400/500\",\r\n    },\r\n    {\r\n      contestname: \"Code Kedan\",\r\n      rank: \"4/50\",\r\n      points: \"100/500\",\r\n    },\r\n    {\r\n      contestname: \"Audition round\",\r\n      rank: \"5/50\",\r\n      points: \"300/500\",\r\n    },\r\n  ]);\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const [selectedbtn, setselectedbtn] = React.useState(\"homebtn\");\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            setselectedbtn(\"homebtn\");\r\n          }}\r\n          selected={selectedbtn === \"homebtn\"}\r\n        >\r\n          <ListItemIcon>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Home\" />\r\n        </ListItem>\r\n        <Divider />\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            setselectedbtn(\"updateprofile\");\r\n          }}\r\n          selected={selectedbtn === \"updateprofile\"}\r\n        >\r\n          <ListItemIcon>\r\n            <ProfileIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"UpdateProfile\" />\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const container =\r\n    window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap className=\"headinginfo\">\r\n            <h5>Welcome,</h5>\r\n            Parag Thakur\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Typography>\r\n          {selectedbtn === \"homebtn\" && (\r\n            <div className=\"aboutuser\">\r\n              <div className=\"userinfo\">\r\n                <div className=\"userimagebox\">\r\n                  <Avatar className=\"styleimage\"></Avatar>\r\n                </div>\r\n                <div className=\"userinfobox\">\r\n                  <div className=\"nameinfo\">\r\n                    <h3>Parag Thakur</h3>\r\n                  </div>\r\n                  <div className=\"collegeinfo\">\r\n                    <span>\r\n                      Studying at YMCA University of Science and Technology -\r\n                      Faridabad\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"skillsinfo\">\r\n                    <h4>\r\n                      Skills: <span>C++,Python</span>\r\n                    </h4>\r\n                  </div>\r\n                  <div className=\"educationinfo\">\r\n                    <h4>\r\n                      Education:{\" \"}\r\n                      <span>\r\n                        YMCA University of Science and Technology - Faridabad\r\n                      </span>\r\n                    </h4>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"participationinfo\">\r\n                <div className=\"participationheading\">\r\n                  <h2 className=\"participationheadingstyle\">Participation:</h2>\r\n                </div>\r\n                <div className=\"contestinfocards\">\r\n                  {(contests.length ===0)\r\n                    &&(\r\n                      <h3>\r\n                        You haven't participated in any contest uptil now!!\r\n                      </h3>\r\n                    )}\r\n                  {contests.length != 0 &&\r\n                    contests.map((contest) => (\r\n                      <Participation\r\n                        contestname={contest.contestname}\r\n                        rank={contest.rank}\r\n                        marks={contest.points}\r\n                      />\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {selectedbtn === \"updateprofile\" && (\r\n            <div>\r\n              <div className=\"mainupdate\">\r\n                <h1>Update Profile</h1>\r\n              </div>\r\n              <div className=\"updateform\">\r\n                <Form>\r\n                  <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                    <Form.Text className=\"text-muted\">\r\n                      We'll never share your email with anyone else.\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n                  </Form.Group>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    Update\r\n                  </Button>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserPanel;\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\questionpage\\Questiondrawer.js",["189","190","191","192","193","194"],"import React, { useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport QuestionIcon from \"@material-ui/icons/QuestionAnswerTwoTone\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const [selectedindex, setselected] = React.useState(0);\r\n  const [selectedOption, setSelectedOption] = React.useState({});\r\n  const [activequestion, setactivequestion] = React.useState(\r\n    props.questiondata[0]\r\n  );\r\n  const [tickicon, setTickicon] = React.useState(\r\n    <DoneIcon style={{ color: \"green\" }} />\r\n  );\r\n  const [value, setValue] = React.useState(activequestion.options.opt1.value);\r\n  const [savedindex, setSavedindex] = React.useState(null);\r\n  const [hour,setHour] = React.useState(-1);\r\n  const [minutes,setMinutes] = React.useState(-1);\r\n  const [seconds,setSeconds] = React.useState(-1);\r\n\r\n  //Mobile Screen\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  //get Questions\r\n  useEffect(() => {\r\n    \r\n    var countDownDate = new Date(\"Sep 25, 2025 11:37:00\").getTime();\r\n\r\n    // Update the count down every 1 second\r\n    var x = setInterval(function () {\r\n      // Get todays date and time\r\n      var now = new Date().getTime();\r\n\r\n      // Find the distance between now an the count down date\r\n      var distance = countDownDate - now;\r\n\r\n      // Time calculations for days, hours, minutes and seconds\r\n      var hours = Math.floor(\r\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      setHour(hours);\r\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      setMinutes(minutes);\r\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n      setSeconds(seconds);\r\n      // Output the result in an element with id=\"demo\"\r\n      \r\n      // If the count down is over, write some text\r\n      if(hours===0 && seconds===0 && minutes===0){\r\n        clearInterval(x);\r\n        handlePostQuestions();\r\n        console.log(\"done\");\r\n      }\r\n      \r\n    }, 1000);\r\n    \r\n  }, []);\r\n\r\n  //Submit Button\r\n  const handlePostQuestions = () => {\r\n    console.log(\"posted\")\r\n    props.postQuestions(props.token, localStorage.getItem([\"submissions\"]));\r\n  };\r\n\r\n  //Load Selection of Radio Buttons\r\n  const createSelection = (e, value) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const createArrayQuestions = (e) => {\r\n    e.preventDefault();\r\n\r\n    var myArray = [];\r\n    // load saved array\r\n    if (localStorage.getItem([\"submissions\"]) != null) {\r\n      myArray = JSON.parse(localStorage.getItem([\"submissions\"]));\r\n    }\r\n\r\n    var data = {\r\n      Question_Id: activequestion.id,\r\n      optionchosen: value,\r\n    };\r\n\r\n    console.log(myArray.length);\r\n\r\n    if (myArray.find((element) => element.Question_Id === activequestion.id)) {\r\n      for (var i = 0; i < myArray.length; i++) {\r\n        if (myArray[i].Question_Id === activequestion.id) {\r\n          myArray[i] = data;\r\n        }\r\n      }\r\n    } else {\r\n      myArray.push(data);\r\n    }\r\n\r\n    // re-save array\r\n    localStorage.setItem([\"submissions\"], JSON.stringify(myArray));\r\n  };\r\n\r\n  //Clear Selection\r\n  const removeArrayQuestions = (e) => {\r\n    e.preventDefault();\r\n    setValue(\"#\");\r\n    localStorage.removeItem([\"submissions\"]);\r\n  };\r\n\r\n  //Handle Previous Button\r\n  const handlePrev = (e) => {\r\n    e.preventDefault();\r\n    if (selectedindex !== 0) {\r\n      setselected(selectedindex - 1);\r\n      setactivequestion(props.questiondata[selectedindex - 1]);\r\n      console.log(selectedindex - 1);\r\n    } else {\r\n      setselected(selectedindex);\r\n      setactivequestion(props.questiondata[selectedindex]);\r\n    }\r\n  };\r\n\r\n  //Handle Next Button\r\n  const handleNext = (e) => {\r\n    e.preventDefault();\r\n    var len = Object.keys(props.questiondata).length - 1;\r\n    if (selectedindex !== len) {\r\n      setselected(selectedindex + 1);\r\n      setactivequestion(props.questiondata[selectedindex + 1]);\r\n      console.log(selectedindex + 1);\r\n    } else {\r\n      setselected(selectedindex);\r\n      setactivequestion(props.questiondata[selectedindex]);\r\n    }\r\n  };\r\n\r\n  //Handle Green Tick\r\n\r\n  const handleGreenTick = (index) => {\r\n    var myArray = [];\r\n    if (localStorage.getItem([\"submissions\"]) !== null) {\r\n      myArray = JSON.parse(localStorage.getItem([\"submissions\"]));\r\n    }\r\n\r\n    const help = myArray.findIndex((rank) => rank.Question_Id === index);\r\n    console.log(help);\r\n    if (help >= 0 && help <= 49) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  //Drawer Map\r\n  var drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {props.questiondata.map((questions, index) => (\r\n          <React.Fragment>\r\n            <ListItem\r\n              button\r\n              alignItems=\"center\"\r\n              index={index}\r\n              selected={selectedindex === index}\r\n              key={questions.id}\r\n              onClick={() => {\r\n                setactivequestion(questions);\r\n                setselected(index);\r\n              }}\r\n            >\r\n              <ListItemIcon>\r\n                {\" \"}\r\n                <QuestionIcon />{\" \"}\r\n              </ListItemIcon>\r\n              <ListItemText center primary={\"Question-\" + index} />\r\n              <ListItemIcon>\r\n                {localStorage.getItem([\"submissions\"])\r\n                  ? handleGreenTick(questions.id)\r\n                    ? tickicon\r\n                    : null\r\n                  : null}\r\n              </ListItemIcon>\r\n            </ListItem>\r\n            <Divider />\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  //Timer\r\n\r\n\r\n  const container =\r\n    window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            <div className=\"questionpageheader\">\r\n              <div className=\"timeinfo\">\r\n                <span>{hour}hr {minutes}min {seconds}sec</span>\r\n              </div>\r\n\r\n              <div className=\"prevnextbtn\">\r\n                <Button color=\"danger\" onClick={(e) => handlePrev(e)}>\r\n                  &larr; prev\r\n                </Button>\r\n                <Button color=\"danger\" onClick={(e) => handleNext(e)}>\r\n                  next &rarr;\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={(e) => handlePostQuestions(e)}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Typography paragraph>\r\n          <div className=\"mainquestion\">\r\n            <p>\r\n              <span>Question: </span>\r\n              {activequestion.question}\r\n            </p>\r\n          </div>\r\n          <div className=\"optionsselect\">\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup aria-label=\"Questions\" name=\"Question\" value={value}>\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt1.value}\r\n                  control={<Radio onClick={(e) => createSelection(e)} />}\r\n                  label={activequestion.options.opt1.option}\r\n                />\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt2.value}\r\n                  control={<Radio onClick={(e) => createSelection(e)} />}\r\n                  label={activequestion.options.opt2.option}\r\n                />\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt3.value}\r\n                  control={<Radio onClick={(e) => createSelection(e)} />}\r\n                  label={activequestion.options.opt3.option}\r\n                />\r\n                <FormControlLabel\r\n                  value={activequestion.options.opt4.value}\r\n                  control={\r\n                    <Radio\r\n                      onClick={(e) => createSelection(e, e.target.value)}\r\n                    />\r\n                  }\r\n                  label={activequestion.options.opt4.option}\r\n                />\r\n              </RadioGroup>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={(e) => createArrayQuestions(e)}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={(e) => removeArrayQuestions(e)}\r\n              >\r\n                Clear\r\n              </Button>\r\n            </FormControl>\r\n          </div>\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getQuestions: (token) => {\r\n      dispatch(actions.getQuestions(token));\r\n    },\r\n    postQuestions: (token, data) => {\r\n      dispatch(actions.postQuestions(token, data));\r\n    },\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    questiondata: state.question.questionsdata,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResponsiveDrawer);\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Navbar.js",["195","196","197"],"import React,{useState} from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport Geeksman from './images/png/geeksman.png'\r\n\r\n\r\n\r\nconst Navbar = () => {\r\n    const[login,setlogin]=useState(false);\r\n\r\n    return (\r\n        \r\n        <nav className=\"navbar navbar-expand-md\">\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-logo navbar-brand\" to=\"/\">\r\n                    <img alt=\"svgImg\" width=\"48px\" src={Geeksman} />\r\n                    GeeksCode\r\n                </Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item active\" >\r\n                            <NavLink className=\"nav-link\" to=\"/contact\" >Contact</NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item\" >\r\n                            <NavLink className=\"nav-link\" to=\"/contests\">Contests</NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item\" >\r\n                            <NavLink className=\"nav-link  \" to=\"/about\">About</NavLink>\r\n                        </li>\r\n                        \r\n\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHeader.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHomeProblem.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\HomepageCarousel.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestHome.js",["198","199"],"import React,{Component} from 'react';\r\nimport ContestHeader from './ContestHeader';\r\nimport { Link } from 'react-router-dom';\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { data } from 'jquery';\r\n\r\n\r\nclass ContestHome extends Component {\r\n    \r\n    \r\n    render(){\r\n        var id=JSON.parse(localStorage.getItem(\"activecontest\"))-1;\r\n    return (\r\n        <div id=\"contest-home\">\r\n            <ContestHeader content=\"Contests\" />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-7\">\r\n                    <div className=\"contest-name\">\r\n                        {this.props.data[id].name}\r\n                    </div>\r\n                    <div className=\"contest-remaining-time\">\r\n                        The contest will start at {this.props.data[id].starttime} on {this.props.data[id].startdate}\r\n                    </div>\r\n                    <div className=\"contest-instructions-container\">\r\n                        <div className=\"contest-instructions-heading\">\r\n                            Instructions\r\n                        </div>\r\n                        <div className=\"contest-instructions\">\r\n                            {this.props.data[id].rules}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-5\">\r\n                    \r\n                    <Link to={\"/contests/\"+this.props.data[id].name+\"/questions/\"}>\r\n                        <button className=\"contest-register-button\">Start Now</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      token: state.auth.token,\r\n      data: state.contest.contestdata,\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps)(ContestHome);\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestsHome.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblem.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\index.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceUserPreferences.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestProblems.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceOptions.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\userpanel\\Participation.js",["200"],"import React from 'react'\r\nimport Divider from \"@material-ui/core/Divider\";\r\nfunction Participation({contestname,rank,marks}) {\r\n    return (\r\n        <div className=\"participationcard\">\r\n            <div className=\"upperhalf\">\r\n              <h4>{contestname}</h4>\r\n            </div>\r\n            \r\n            <div className=\"lowerhalf\">\r\n              <div className=\"rankinfo\">\r\n                Rank:<span>{rank}</span>\r\n              </div>\r\n              <div className=\"marksinfo\">\r\n                Marks:<span>{marks}</span>\r\n              </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Participation\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\Developers-card.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\About-memberscard.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\utils\\modals\\modal.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\LoginSlide.js",["201"],"import React, { Component, useState } from \"react\";\r\nimport mainpng from \"../images/png/main.png\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass LoginSlide extends Component {\r\n  state = {\r\n    show: false,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"login-slide container-fluid\">\r\n          <img src={mainpng} className=\"mainpng\" alt=\"mainimg\"/>\r\n          <div className=\"login-slide-text-content\">\r\n            <h1>Geeksman - The Coding Society</h1>\r\n            <br />\r\n            Join the <strong>Coding Society</strong> of CE Department of JCBOSE UST{\" \"}\r\n            <br />\r\n            Practice coding, prepare for contests, and win challenges.\r\n          </div>\r\n          <div className=\"login-buttons\">\r\n            <Link className=\"login-button\" to=\"/login\">\r\n              Login\r\n            </Link>\r\n            <Link className=\"login-button\" to=\"/login\">\r\n              SignUp\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginSlide;\r\n","E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\ContestSlide.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\HomePage\\TopPerformersSlide.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\auth.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Contest\\ContestCard.js",["202"],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\questionpage.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceThemes.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\components\\Ace\\AceLanguages.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\actions\\contests.js",[],"E:\\GeeksMan-2k21-FrontEnd\\src\\store\\reducers\\contest.js",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":15,"nodeType":"209","messageId":"210","endLine":1,"endColumn":23},{"ruleId":"207","severity":1,"message":"211","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":18},{"ruleId":"212","severity":1,"message":"213","line":72,"column":15,"nodeType":"214","endLine":72,"endColumn":27},{"ruleId":"207","severity":1,"message":"215","line":2,"column":9,"nodeType":"209","messageId":"210","endLine":2,"endColumn":19},{"ruleId":"203","replacedBy":"216"},{"ruleId":"205","replacedBy":"217"},{"ruleId":"207","severity":1,"message":"218","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":17},{"ruleId":"207","severity":1,"message":"219","line":9,"column":8,"nodeType":"209","messageId":"210","endLine":9,"endColumn":17},{"ruleId":"207","severity":1,"message":"220","line":64,"column":20,"nodeType":"209","messageId":"210","endLine":64,"endColumn":31},{"ruleId":"221","severity":1,"message":"222","line":218,"column":36,"nodeType":"223","messageId":"224","endLine":218,"endColumn":38},{"ruleId":"207","severity":1,"message":"225","line":67,"column":10,"nodeType":"209","messageId":"210","endLine":67,"endColumn":24},{"ruleId":"207","severity":1,"message":"226","line":67,"column":26,"nodeType":"209","messageId":"210","endLine":67,"endColumn":43},{"ruleId":"207","severity":1,"message":"227","line":71,"column":20,"nodeType":"209","messageId":"210","endLine":71,"endColumn":31},{"ruleId":"207","severity":1,"message":"228","line":75,"column":10,"nodeType":"209","messageId":"210","endLine":75,"endColumn":20},{"ruleId":"207","severity":1,"message":"229","line":75,"column":22,"nodeType":"209","messageId":"210","endLine":75,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":118,"column":6,"nodeType":"232","endLine":118,"endColumn":8,"suggestions":"233"},{"ruleId":"207","severity":1,"message":"234","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":16},{"ruleId":"207","severity":1,"message":"235","line":9,"column":11,"nodeType":"209","messageId":"210","endLine":9,"endColumn":16},{"ruleId":"207","severity":1,"message":"236","line":9,"column":17,"nodeType":"209","messageId":"210","endLine":9,"endColumn":25},{"ruleId":"207","severity":1,"message":"237","line":4,"column":13,"nodeType":"209","messageId":"210","endLine":4,"endColumn":20},{"ruleId":"207","severity":1,"message":"238","line":6,"column":10,"nodeType":"209","messageId":"210","endLine":6,"endColumn":14},{"ruleId":"207","severity":1,"message":"239","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":15},{"ruleId":"207","severity":1,"message":"208","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"234","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":16},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'LoginModal' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FullScreen' is defined but never used.",["240"],["241"],"'PropTypes' is defined but never used.","'InboxIcon' is defined but never used.","'setcontests' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'selectedOption' is assigned a value but never used.","'setSelectedOption' is assigned a value but never used.","'setTickicon' is assigned a value but never used.","'savedindex' is assigned a value but never used.","'setSavedindex' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handlePostQuestions'. Either include it or remove the dependency array.","ArrayExpression",["242"],"'Button' is defined but never used.","'login' is assigned a value but never used.","'setlogin' is assigned a value but never used.","'actions' is defined but never used.","'data' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},"Update the dependencies array to be: [handlePostQuestions]",{"range":"245","text":"246"},[3967,3969],"[handlePostQuestions]"]